plugins {
    id 'java'
    id 'org.springframework.boot' version '2.5.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

group = 'com.example.sqlchecker'
version = '1.0-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}
ext['log4j2.version'] = '2.17.2'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "com.querydsl:querydsl-core:5.0.0"
    implementation "com.querydsl:querydsl-jpa:5.0.0"
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.7.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.3'

    annotationProcessor(
            "jakarta.persistence:jakarta.persistence-api",
            "jakarta.annotation:jakarta.annotation-api",
            "com.querydsl:querydsl-apt:5.0.0:jpa")

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    runtimeOnly 'mysql:mysql-connector-java'
    compileOnly 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

sourceSets {
    main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
        }
    }
}

test {
    useJUnitPlatform()
}

bootJar {
    mainClass = 'com.example.sqlchecker.SqlCheckerApplication'
}